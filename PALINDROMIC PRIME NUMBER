#include <iostream>  
#include <string>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
// global
int k,temp2;  
class cpe1b{
	public:
		
		void palindromic_prime(long x);
		void wasteful_number(long x); 
		long prime(long num);  
		long binary(long num1); 
		long reverse(long num2);  
		long digit(long num3); 
		long primefactorization(long num4); 
		
		
		long j,count,x;
		long pdtemp, bin, base, rem;
		long rev, temp, key;
		long dolor, digits;
		long factors,t,i;
		long rem1[100];
		long johanna;
	};

int main() {
	cpe1b guwapo; //declare nga gwapo ang taga cpe 1-b
    string str;  // using string as the function

    cout<<"INPUT STRING: ";
	cin>>str;
    cout << "The size of str is " << str.length() << " bytes.\n"<<endl;
	
	// EXAM

	if (str.length()%2!=0) //declare nga odd ang string
		{

		for(k=2;k<=str.length();k++) 
			{	
			guwapo.palindromic_prime(k); // 'palindromic_prime' ang gwapo
			}
		}
	else
		{

		for(k=2;k<=str.length();k++)
			{
			guwapo.wasteful_number(k); // 'wasteful_number' ang guwapo
			}
		}
	return 0;
}

void cpe1b::palindromic_prime(long x)
	{ 	
		prime(x); //'palindromic_prime'
	}
	
void cpe1b::wasteful_number(long x)
	{
		digit(x);	
		if (digits<factors) // comparing if it is wastefull number or not
			{
				cout<<"--- WASTEFUL KO HAHA"<<endl<<endl;
			}
		else
			{
				cout<<"--- DILI KO WASTEFUL HUHU"<<endl<<endl;
			}
	}


long cpe1b::prime(long num)  /
	{
	

	count = 0;
		for (j=2;j<num;j++)
			{
			if (num%j==0)
				{
					count++;
				}
			}		
			if (count==0)
				{
					cout<<"PRIME: "<<num<<endl;
					binary(num);
				}
			else
				{
					cout<<"COMPOSITE: "<<num<<endl;
					cout<<"--- DILI KO PRIME:("<<endl;
				}
	}
	
long cpe1b::binary(long num1) 
	{	
	/* BINARY */ 

	pdtemp = num1;
	bin=0;
	base = 1;
	
	for (;pdtemp>0;)
		{
			rem=pdtemp%2;
			bin=bin+(rem*base);
			base = base*10;
			pdtemp=pdtemp/2;
		}
							printf("\tBINARY: %ld", bin);
							reverse(bin);
	}
long cpe1b::reverse(long num2) //mao ni sulod sa function nga reverse nga gitawag sa function nga binary
	{
	/*REVERSE*/ // process sa pagreverse sa binary sa babaw para macompare silang duha arun maka-identify ko nga palindromic ba siya or dili
	key=num2;
	temp=0;
	rev=0;

	for (;key!=0;)
		{
			temp=key%10;
			key=key/10;
			rev=temp+(rev*10);
		}
							printf("\tREVERSE: ");
							cout<<rev<<endl;
	
		if (rev==num2)
			{
				cout<<"--- PALINDROMIC PRIME KO YEHEY"<<endl;
			}
		else
			{
				cout<<"--- DILI KO PALINDROMIC PRIME :("<<endl;
			}
}
//  WASTEFUL NUMBER
long cpe1b::digit(long num3) 
	{
		dolor=num3;
		johanna=num3;
		digits = 0;
 cout<<"NUMBER: "<<num3<<endl; 
	for (;dolor!=0;) 
		{
			dolor=dolor/10;
			digits++;
		}
	printf("\t\t\tDIGITS OF NUM: %ld\n", digits);
		
		primefactorization(johanna); 
	}

long cpe1b::primefactorization(long num4) // prime factorization
	{
			
	x=num4;
	factors=0;
	i=2; 
	t=0;
		
	for (;x!=0;) 
	   {
	   	if (x%i==0)
	   		{
	       		x=x/i;
	       		rem1[t]=i; 
	       		t++;
	       		factors++; //counting prime factors 
	       				if (x==1)
						   {
	              				break; //break if its start a '2'
					        }
	        }
	    else
			{
		       i++; //mu-increment if not '0' until the result is 0
	        }
	    }
	    
	    // print the prime factors
	    printf("\t\tprimeFACTORS: ");
	    
		for (i=0;i<factors;i++)
			{
				printf(" %ld  ",rem1[i]);
			}
		printf("\n");
		printf("\t\t\tDIGITS OF FACTORS: %ld\n", factors);
	return 0;
	}
